class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

# In-order Traversal
def inorder_traversal(root):
    if root:
        inorder_traversal(root.left)
        print(root.value, end=" ")
        inorder_traversal(root.right)

# Pre-order Traversal
def preorder_traversal(root):
    if root:
        print(root.value, end=" ")
        preorder_traversal(root.left)
        preorder_traversal(root.right)

# Post-order Traversal
def postorder_traversal(root):
    if root:
        postorder_traversal(root.left)
        postorder_traversal(root.right)
        print(root.value, end=" ")

def swap_subtrees(node):
    if node is not None:
        node.left, node.right = node.right, node.left
        swap_subtrees(node.left)
        swap_subtrees(node.right)


root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
root.right.left = TreeNode(6)
root.right.right = TreeNode(7)

# Original Tree Traversals
print("Original Tree Traversals:")
print("Pre-order Traversal:")
preorder_traversal(root)
print("\nIn-order Traversal:")
inorder_traversal(root)
print("\nPost-order Traversal:")
postorder_traversal(root)

#swap
print("\nSwapping All Subtrees...\n")
swap_subtrees(root)

print("Tree Traversals After Swapping All Subtrees:")
print("Pre-order Traversal After Swap:")
preorder_traversal(root)
print("\nIn-order Traversal After Swap:")
inorder_traversal(root)
print("\nPost-order Traversal After Swap:")
postorder_traversal(root)
